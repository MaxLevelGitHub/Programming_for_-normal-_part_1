
"""ИЗВИНИТЕ ЗА МОНОЛИТНОСТЬ"""

"""1.6.3 Задания =======================================================
Задание 1 (Ввод/вывод данных) Здесь собраны задачи по сути учебные,
но полезные. Их выполнение позволит вам «набить руку» и выработать
необходимые навыки. Задания необходимо выполнить в интерактивном
и скриптовом режимах. Выполнять следует всё и по порядку.
    Напишите программу:
1. последовательно запрашивающую ваши фамилию, имя, отчество и выводящую их одной строкой в последовательности: фамилия → имя → отчество;
2. последовательно запрашивающую ваши фамилию, имя, отчество и выводящую их одной строкой в последовательности: имя → отчество → фамилия
(можно совместить первый и второй пункты в одной программе, запросив
данные один раз, но обеспечив вывод обоими способами);"""

# surname, name, patronymic = input(), input(), input()
# print(surname, name, patronymic) # 1
# print(name, patronymic, surname) # 2

"""3. преобразующую простую русскую фамилию в мужском роде в женский род
(Петров → Петрова; Путин → Путина);"""

# print(input() + 'а')

"""4. последовательно введите число, месяц, год рождения; выведите дату своего
рождения через точки (01.01.2000), косую черту (01/01/2000), пробелы (01
01 2000), тире (01-01-2000)."""

# date, month, year = input(), input(), input()
# d, m, y = date, month, year
# print(
#     f"{d}.{m}.{y}",
#     f"{d}/{m}/{y}",
#     f"{d} {m} {y}",
#     f"{d}-{m}-{y}",
#     sep='\n'
# )

"""2.8 Задания на работу с основными типами данных ======================
Задание 2 (Арифметические операции) Выполнять три задания в зависимости от номера в списке. Чтобы узнать номера ваших заданий,
необходимо решить задачку: требуется сделать задания № 𝑚, № 𝑚 + 5,
№ 𝑚 + 10, где 𝑚 = (𝑛 − 1)%5 + 1, 𝑛 — порядковый номер студента в списке группы по алфавиту."""

# n = 19 # Михайлов
# m = (n - 1) % 5 + 1 # =4
# print(m, m+5, m+10) # =4, 9, 14

"""Используя арифметические операторы (+, −, *, /, //, %), напишите программу (необходимая информация запрашивается у пользователя с клавиатуры).
4. Сколько нечётных чисел на отрезке [𝑎; 𝑏], если 𝑎 и 𝑏 — чётные? 𝑎 и 𝑏 — нечётные? 𝑎 — чётное, 𝑏 — нечётное? 𝑎 — нечётное, 𝑏 — чётное?"""

# count = 0 # СОМНИТЕЛЬНОЕ ЗАДАНИЕ
# for i in range(int(input()), int(input())+1):
#     if i % 2 != 0: count += 1
# print(count)

"""9. На территории Российской империи до введения метрической системы мер
для измерения объёма жидкости применялись следующие меры: 1 бочка
= 40 вёдер, 1 ведро = 10 штофов, 1 штоф = 10 чарок, 1 чарка = 2 шкалика. Какое полное количество вёдер, штофов, чарок и шкаликов можно
наполнить из 𝐴 бочек? Разлейте имеющееся количество некой жидкости на
𝑥 полных вёдер + 𝑦 полных штофов + 𝑧 полных чарок + 𝑣 шкаликов."""

# barrels = int(input())
# print(
#     'вёдер: ' +    str(barrels * 40),
#     'штофов: ' +   str(barrels * 40 * 10),
#     'чарок: ' +    str(barrels * 40 * 10 * 10),
#     'шкаликов: ' + str(barrels * 40 * 10 * 10 * 2),
#     sep='\n'
# )

"""14. Бревно длиной 𝐿 распилили в 𝑛 местах. Какова средняя длина получившихся кусков?"""

# print(round(int(input()) / int(input()), 1))

"""Задание 3 (Строки) Задания выполняйте все по порядку. =================
    Свяжите любую переменную со строкой: «Мы обязательно научимся программировать!». Извлеките из неё следующие срезы:
1. выведите третий символ этой строки;"""

# print(input()[2])

"""2. выведите предпоследний символ этой строки;"""

# print(input()[-2])

"""3. выведите первые пять символов этой строки;"""

# print(input()[:5])

"""4. выведите всю строку, кроме последних двух символов;"""

# print(input()[:-2])

"""5. выведите все символы с чётными индексами (считая, что индексация начинается с 0);"""

# print(input()[::2])

"""6. выведите все символы с нечётными индексами, то есть, начиная с первого символа строки;"""

# print(input()[1::2])

"""7. выведите четыре символа из центра строки;"""

# t = input() # t - text (full)
# count = len(t)
# tt = int((count - 4) / 2) # tt - text2 (part)
# print((t[tt:-tt] if count % 2 == 0 else t[tt:-tt - 1]))

"""8. выведите символы с индексами, кратными трём;"""

# print(input()[2::3])

"""9. выведите все символы в обратном порядке;"""

# print(input()[::-1])

"""10. выведите все символы строки через один в обратном порядке, начиная с последнего;"""

# print(input()[::-2])

"""11. удалите второе слово из строки;"""

# t = input().split()
# print(*t[:1] + t[2:])

"""12. замените второе слово на строку «никогда не»;"""

# t = input().split()
# print(*t[:1], 'никогда не', *t[2:])

"""13. добавьте в конец строки «на Python»;"""

# print(input(), 'на Python')

"""14. поставьте последнее слово первым в строке;"""

# t = input().split()
# print(t[-1], *t[:-1])

"""15. выведите длину данной строки."""

# print(len(input()))

"""Задание 4 (Логический тип данных. Логические операторы) ===============
В каждой группе выполнять по одному заданию в зависимости от номера в списке группы: (𝑛 − 1)%10 + 1, где 𝑛 — номер в списке."""

# print((19 - 1) % 10 + 1) # =9

"""Вычислить значение логического выражения. Значения переменных 𝑥 и 𝑦
вбиваются с клавиатуры.
9. 𝑥 > 4 или 𝑦^2 ̸= 4"""

# print((int(input())) > 4 | int(input())**2 != 4)

"""Вычислить значение логического выражения при всех возможных значениях
логических величин X, 𝑌 и 𝑍 (для образца можно взять задачку про Шумахера):
9. не (𝑋 или 𝑌 и 𝑍) или не X"""

# x, y, z = bool(input()), bool(input()), bool(input())
# print(not (x or y and z) or not x)

"""Записать условие (составить логическое выражение), которое является истинным, когда:
9. только одно из чисел 𝑋, 𝑌 , 𝑍 меньше 10;"""

# x, y, z = int(input()), int(input()), int(input())
# print((x < 10 and x < y and x < z) or
#       (y < 10 and y < x and y < z) or
#       (z < 10 and z < y and z < x))

"""Задание 5 (Условный оператор) Выполнять три задания в зависимости от номера в списке. Необходимо сделать задания № 𝑚, № 𝑚 + 5,
№ 𝑚 + 10, где 𝑚 = (𝑛 − 1)%5 + 1, 𝑛 — номер студента в списке группы в
алфавитном порядке."""

# n = 19 # по прежнему Михайлов
# m = (n - 1) % 5 + 1 # =4
# print(m, m+5, m+10) # =4, 9, 14

"""4. Запросите у пользователя два числа. Далее:
• если первое больше второго, то вычислить их разницу и вывести данные на печать;
• если второе число больше первого, то вычислить их сумму и вывести
на печать;
• если оба числа равны, то вывести это значение на печать."""

# a, b = int(input()), int(input())
# print((a % b if a > b else (a + b if b > a else a)))

"""9. Напишите программу, которая поможет вам оптимизировать путешествие на автомобиле. Пусть программа запрашивает у пользователя следующие данные:
• Сколько километров хотите проехать на автомобиле?
• Сколько литров топлива расходует автомобиль на 100 километров?
• Сколько литров топлива в вашем баке?
Далее в зависимости от введённых значений программа должна выдать
вердикт: проедете вы желаемое расстояние или нет;"""

# km = int(input('Сколько километров хотите проехать на автомобиле? > '))
# lp100km = int(input('Сколько литров топлива расходует автомобиль на 100 километров? > '))
# v = int(input('Сколько литров топлива в вашем баке? > '))
# print((v / lp100km) * 100 >= km)

"""14. Составить программу, которая в зависимости от порядкового номера месяца (1, 2, ..., 12) выводит на экран его название (январь, февраль, ...,декабрь)."""

# months = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
# print(months[int(input()) - 1])

"""Задание 6 (Списки. Кортежи. Словари) Задания выполняйте все по порядку. =================
    1. Списки
a) Создайте два списка в диапазоне (0, 100) с шагом 10. Присвойте некоторым переменным значения этих списков.
b) Извлеките из первого списка второй элемент.
c) Измените во втором списке последний объект на число «200». Выведите список на экран.
d) Соедините оба списка в один, присвоив результат новой переменной.
Выведите получившийся список на экран.
e) Возьмите срез из соединённого списка так, чтобы туда попали некоторые части обоих первых списков. Срез свяжите с очередной новой
переменной. Выведите значение этой переменной.
f) Добавьте в список-срез два новых элемента и снова выведите его.
g) С помощью функций min() и max() найдите и выведите элементы объединённого списка с максимальным и минимальным значением."""

# s1, s2 = [3, 13, 23, 33, 43], [5, 15, 25, 35, 45] # a
# del s1[1] # b
# s2[-1] = 200 # c
# print('c)', s2)
# s3 = s1 + s2 # d
# print('d)', s3)
# s4 = s3[2:7] # e
# print('e)', s4)
# s4.append(66) # f
# s4.append(67)
# print('f)', s4)
# print('g)', min(s4), max(s4)) # g

"""2. Кортежи
a) Создайте два кортежа: один из чисел в диапазоне (1, количество учеников в группе) с шагом 1, второй — из фамилий учеников вашей
группы. Пусть они соответствуют друг другу;
b) Посмотрите, какая фамилия у студента с номером 5.
c) А теперь посмотрите, что записано во второй кортеж под номером 5.
d) Объедините два кортежа в один, присвоив результат новой переменной. Выведите получившийся список на экран.
e) Возьмите срез из соединенного кортежа так, чтобы туда попали некоторые части обоих первых кортежей. Срез свяжите с очередной новой
переменной. Выведите значение этой переменной."""

# n = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) # a
# fam = ("Бормотов", "Волкова", "Кулик", "Михайлов", "Фетисов", "Уваров", "Прончев", "Разов", "Мингазов", "Веселов")
# print('b), c)', fam[4]) # b, c
# l = n + fam # d
# print('d)', l)
# f = l[5:15] # e
# print('e)', f)

"""3. Словари
a) Создайте словарь, связав его с переменной School, и наполните его данными, которые бы отражали количество учащихся в пяти разных классах (например, 1а, 1б, 2в и т. д.); выведите содержимое словаря на экран.
b) Узнайте сколько человек в каком-нибудь классе. Класс запрашивается у пользователя с клавиатуры, если такого запрашиваемого класса в школе нет, то выдаётся сообщение: «Такого класса на существует».
c) В школе произошли изменения, внесите их в словарь: в трёх классах изменилось количество учащихся; результат выведите на экран.
d) В школе появилось два новых класса, новый словарь выведите на экран.
e) В школе расформировали один из классов, выведите содержимое нового словаря на экран."""

# School = {'1а': ['Маша', 'Паша'], # a
#           '1б': ['Гиша', 'Миша'],
#           '2в': ['Рома'],
#           '2г': ['Макс'],
#           '3д': ['Саша']}

# print('b)', (School[m] if (m := input()) in School.keys() else 'Такого класса на существует')) # b

# del School['1а'][1] # c
# del School['1б'][0]
# School['1б'].append('Паша')
# print('c)', School)

# New = {'1в': ['Ваня'], # d
#        '3а': ['Женя']}
# School.update(New)
# print('d)', School)

# del School['2в'] # e
# print('e)', School)

"""3.6 Задания на циклы =======================================
Задание 7 (Задания на рекуррентные сотношения) Задания выполняйте все по порядку.
Придумайте рекуррентное соотношение, задающее следующие числовые последовательности:
a) 1, 2, 3, 4, . . .
b) 0, 5, 10, 15, . . .
c) 1, 1, 1, 1, . . .
d) 1, −1, 1, −1, . . .
e) 1, −2, 3, −4, 5, −6 . . .
f) 2, 4, 8, 16, . . .
g) 2, 4, 16, 256, . . .
h) 0, 1, 2, 3, 0, 1, 2, 3, 0, . . .
i) 1!, 3!, 5!, 7!, . . ."""

# print(
#     [i for i in range(1, 11)], # a
#     [i for i in range(0, 50, 5)], # b
#     [1 for _ in range(1, 11)], # c
#     [(1 if i % 2 != 0 else -1) for i in range(1, 11)], # d
#     [(i if i % 2 != 0 else -i) for i in range(1, 11)], # e
#     [i for i in range(2, 20, 2)], # f
#     [2] + [2**i for i in range(2, 16, 2)], # g
#     [0, 1, 2, 3] * 3, # h
#     [str(i) + '!' for i in range(1, 16, 2)], # i
#     sep='\n'
# )

"""Задание 8 (Задания на цикл с условием) Выполнять три задания в зависимости от номера в списке группы в алфавитном порядке. Необходимо сделать задания №m, №m+5, №m+10, m=(n-1)%5+1, где 𝑛 — номер в списке группы."""

# n = 19 # по прежнему Михайлов
# m = (n - 1) % 5 + 1 # =4
# print(m, m+5, m+10) # =4, 9, 14

"""4. Напишите программу, которая будет суммировать вводимые с клавиатуры
числа до тех пор, пока они чётные."""

# sum = 0
# while True:
#     n = int(input())
#     if n % 2 == 0:
#         sum += n
#     else:
#         break
# print(sum)

"""9. Напишите программу, которая запрашивает у пользователя числа до тех пор, пока каждое следующее число больше предыдущего. В конце программа сообщает, сколько чисел было введено."""

# count, max = 0, 0
# while True:
#     n = int(input())
#     if n > max:
#         max = n
#         count += 1
#     else:
#         break
# print(count)

"""14. Дано натуральное число, в котором все цифры различны. Определить порядковый номер его минимальной цифры, считая номера: от конца числа; от начала числа."""

# n = list(input())
# min_n = 9

# for i in range(len(n)-1, 0, -1): # от конца числа
#     if int(n[i]) < min_n:
#         min_n = int(n[i])

# for i in range(len(n)): # от начала числа
#     if int(n[i]) < min_n:
#         min_n = int(n[i])

# print(min_n)

"""Задание 9 (Задания на цикл со счётчиком) Выполнять три задания в
зависимости от номера в списке группы в алфавитном порядке. Необходимо сделать задания №m, №m+5, №m+10, m=(n-1)%5+1, где 𝑛 — номер в
списке группы."""

# n = 19 # по прежнему Михайлов
# m = (n - 1) % 5 + 1 # =4
# print(m, m+5, m+10) # =4, 9, 14

"""4. Напишите программу, вычисляющую сумму всех нечётных чисел в диапазоне от 𝑎 до 𝑏 включительно (вводятся с клавиатуры)."""

# sum = 0
# for i in range(int(input()), int(input())+1):
#     if i % 2 != 0:
#         sum += i
# print(sum)

"""9. Напечатать таблицу стоимости 100, 200, 300, . . . , 2000 г конфет (стоимость 1 кг конфет вводится с клавиатуры)."""

# cost = int(input())
# for i in range(100, 2001, 100):
#     print(f'{i} г конфет = {int((cost / 1000) * i)}')

"""14. Найти произведение всех целых чисел от 10 до 100 включительно. Обратите внимание, что Python может работать с целыми числами неограниченного размера!"""

# p = 1
# for i in range(10, 101): p *= i
# print(p)

"""Задание 10 (Задания на комбинацию циклов со счётчиком и условием) Выполнять одно задание с номером (n-1)%8+1 в зависимости от номера 𝑛 в списке группы в алфавитном порядке."""

# n = 19 # по прежнему Михайлов
# print((n - 1) % 8 + 1) # =3

"""3. В детском садике n детей играют в следующую игру. Перед ними гора из 𝑚 кубиков, первый ребёнок вынимает из кучи 1 кубик, каждый последующий ребёнок — в два раза больше предыдущего и так по кругу. Если число кубиков, которые нужно вынуть, превышает 25, из него вычитается 25 и отсчёт идёт от уменьшенного числа, например, вместо 32 кубиков будет вынуто 7, затем 14 и т. д. Проигравшим считается тот, кто не смог вытащить нужное число кубиков (в куче осталось недостаточно). Определите проигравшего."""

# n, m = int(input()), int(input())
# cubs, stop = 1, False
# while stop != True:
#     for i in range(1, n+1):
#         if m - cubs >= 0:
#             m -= cubs
#             cubs *= 2
#             if cubs > 25:
#                 cubs -= 25
#         else:
#             print(f'Проиграл {i} ребенок.')
#             stop = True
#             break

"""Задание 11 Выполнять три задания в зависимости от номера в списке
группы в алфавитном порядке. Необходимо сделать задания №m, №m+5,
№m+10, m=(n-1)%5+1, где 𝑛 — номер в списке группы."""

# n = 19 # по прежнему Михайлов
# m = (n - 1) % 5 + 1 # =4
# print(m, m+5, m+10) # =4, 9, 14

"""Создайте и выведите на экран массивы. Получившиеся матрицы сохраните в текстовые файлы.
4. одномерные длины 10 и 55, матрицу размерами 3 × 4, трёхмерный массив
формы 2 × 4 × 5, все состоящие целиком из значений 0.25;"""

# import numpy as np

# length_10 = np.full(10, 0.25)
# length_55 = np.full(55, 0.25)
# matrix_3x4 = np.full((3, 4), 0.25)
# array_2x4x5 = np.full((2, 4, 5), 0.25)

# print("Одномерная длина 10:\n", length_10)
# print("Одномерная длина 55:\n", length_55)
# print("Матрица 3 x 4:\n", matrix_3x4)
# print("Трехмерный массив 2 x 4 x 5:\n", array_2x4x5)

"""9. диагональную матрицу размера 5 × 5, все значения на главной диагонали которой равны 0.5;"""

# import numpy as np
# diagonal_matrix = np.diag([0.5] * 5)
# print("Диагональная матрица 5x5:\n", diagonal_matrix)

"""14. верхнюю треугольную матрицу 5 × 5, где все элементы выше главной диагонали равны −2, а на ней — единицы;"""

# import numpy as np
# matrix = np.zeros((5, 5))

# np.fill_diagonal(matrix, 1)
# for i in range(5):
#     for j in range(i + 1, 5):
#         matrix[i, j] = -2

# print("Верхняя треугольная матрица 5x5:\n", matrix)

"""Задание 12 Задания выполняйте все по порядку.
Загрузите из файла, созданного в предыдущем задании, данные в массив. Убедитесь, что новый массив получился двумерный. Создайте одномерный
массив-диапазон и прибавьте его к вашей матрице. Посмотрите, что получилось.
Определите максимальный и минимальный элементы массива. Посчитайте сумму элементов по каждой строке массива. Запишите в два отдельных текстовых
файла ваши массив-матрицу и массив-вектор."""

# import numpy as np
# matrix = np.loadtxt("matrix_11_14.txt")

# # Проверка размерности матрицы
# print("Размерность матрицы:", matrix.shape)

# # Создание одномерного массива-диапазона
# range_array = np.arange(5)

# # Прибавление массива-диапазона к матрице
# result_matrix = matrix + range_array[:, np.newaxis]  # Используем вещание

# print("Матрица с добавленным диапазоном:\n", result_matrix)

# max_element = np.max(result_matrix)
# min_element = np.min(result_matrix)
# print("Максимальный элемент:", max_element)
# print("Минимальный элемент:", min_element)

# # Подсчет суммы элементов по каждой строке
# row_sums = np.sum(result_matrix, axis=1)
# print("Суммы элементов по каждой строке:\n", row_sums)

# # Сохранение в текстовые файлы
# np.savetxt("result_matrix.txt", result_matrix)
# np.savetxt("range_array.txt", range_array)

"""Задание 13 Выполнять три задания в зависимости от номера в списке
группы в алфавитном порядке. Необходимо сделать задания №m, №m+5,
№m+10, m=(n-1)%5+1, где 𝑛 — номер в списке группы."""

# n = 19 # по прежнему Михайлов
# m = (n - 1) % 5 + 1 # =4
# print(m, m+5, m+10) # =4, 9, 14

"""Протабулируйте (вычислите значения функций при изменении аргумента в
некоторых пределах с заданным шагом) функции:
4. cos(2𝜋𝑡) на отрезке 𝑡 ∈ [−10; 10] с шагом 1 и с шагом 0.25;
9. ln(𝑥 + 1) на отрезке 𝑥 ∈ [0; 𝑒 − 1] с шагом 0.01 и с шагом 0.001;
14. √3 𝑥 на отрезке 𝑥 ∈ [1; 125] с шагом 1 и с шагом 5, но так, чтобы значения 1 и 5 присутствовали среди аргументов;"""

# import numpy as np
# import math

# # cos(2πt) на отрезке t ∈ [-10; 10]
# print("cos(2πt) на отрезке t ∈ [-10; 10]:")

# # Шаг 1
# t_values = np.arange(-10, 11, 1)
# cos_values = np.cos(2 * np.pi * t_values)
# print("Шаг 1:")
# for i in range(len(t_values)):
#     print(f"t = {t_values[i]:.0f}, cos(2πt) = {cos_values[i]:.4f}")

# # Шаг 0.25
# t_values = np.arange(-10, 11, 0.25)
# cos_values = np.cos(2 * np.pi * t_values)
# print("\nШаг 0.25:")
# for i in range(len(t_values)):
#     print(f"t = {t_values[i]:.2f}, cos(2πt) = {cos_values[i]:.4f}")

# # ln(x + 1) на отрезке x ∈ [0; e - 1]
# print("\nln(x + 1) на отрезке x ∈ [0; e - 1]:")

# # Шаг 0.01
# x_values = np.arange(0, math.e - 1, 0.01)
# ln_values = np.log(x_values + 1)
# print("Шаг 0.01:")
# for i in range(len(x_values)):
#     print(f"x = {x_values[i]:.2f}, ln(x + 1) = {ln_values[i]:.4f}")

# # Шаг 0.001
# x_values = np.arange(0, math.e - 1, 0.001)
# ln_values = np.log(x_values + 1)
# print("\nШаг 0.001:")
# for i in range(len(x_values)):
#     print(f"x = {x_values[i]:.3f}, ln(x + 1) = {ln_values[i]:.4f}")

# # √3 x на отрезке x ∈ [1; 125]
# print("\n√3 x на отрезке x ∈ [1; 125]:")

# # Шаг 1 (включая 1)
# x_values = np.arange(1, 126, 1)
# sqrt3_values = np.sqrt(3) * x_values
# print("Шаг 1 (включая 1):")
# for i in range(len(x_values)):
#     print(f"x = {x_values[i]:.0f}, √3 x = {sqrt3_values[i]:.4f}")

# # Шаг 5 (включая 1 и 5)
# x_values = np.arange(1, 126, 5)
# sqrt3_values = np.sqrt(3) * x_values
# print("\nШаг 5 (включая 1 и 5):")
# for i in range(len(x_values)):
#     print(f"x = {x_values[i]:.0f}, √3 x = {sqrt3_values[i]:.4f}")

"""5.9 Задания на построение графиков
Задание 14 Выполнять одно задание с номером (𝑛 − 1)%𝑚 + 1, где 𝑛 —
номер в списке группы, а 𝑚 — число задач в задании.
Постройте графики следующих функций, используя шаг выборки данных по
абсциссе из задания 13:"""

# n = 19 # по прежнему Михайлов
# m = 15 # кол-во. заданий
# print((n - 1) % m + 1) # =4

"""4. cos(2𝜋𝑡) на отрезке 𝑡 ∈ [−10; 10];"""

# import matplotlib.pyplot as plt
# import numpy as np

# # Определяем функцию
# def cos_func(t):
#   return np.cos(2 * np.pi * t)

# # Создаем массив значений t
# t = np.arange(-10, 10, 0.25)  # Шаг выборки данных по абсциссе - 0.25

# # Вычисляем значения функции
# y = cos_func(t)

# # Строим график
# plt.plot(t, y)

# # Добавляем название графика и подписи осей
# plt.title('График функции cos(2πt)')
# plt.xlabel('t')
# plt.ylabel('cos(2πt)')

# # Отображаем график
# plt.show()

"""Задание 15 Выполнять одно задание с номером (𝑛 − 1)%𝑚 + 1, где 𝑛 —
номер в списке группы, а 𝑚 — число задач в задании."""

# n = 19 # по прежнему Михайлов
# m = 15 # кол-во. заданий
# print((n - 1) % m + 1) # =4

"""Для построенного в рамках задания 14 графика измените:
• цвет линии;
• тип линии и маркеров;
• шаг выборки данных.
Далее введите сетку. Сохраните полученный график в файл, опробуйте сохранять файл в разных форматах: png, jpg, pdf, eps, svg, svgz. Откройте и просмотрите получившиеся графики. Сравните качество при масштабировании
и размер в байтах одного и того же графика, сохранённого в разных форматах."""

# import matplotlib.pyplot as plt
# import numpy as np

# # Определяем функцию
# def cos_func(t):
#   return np.cos(2 * np.pi * t)

# # Создаем массив значений t
# t = np.arange(-10, 10, 0.01)  # Шаг выборки данных по абсциссе - 0.01

# # Вычисляем значения функции
# y = cos_func(t)

# # Строим график
# plt.plot(t, y, color='red', linestyle='--', marker='o', markersize=5)  # Изменяем цвет, тип линии, маркер и размер маркера

# # Добавляем сетку
# plt.grid(True)

# # Добавляем название графика и подписи осей
# plt.title('График функции cos(2πt)')
# plt.xlabel('t')
# plt.ylabel('cos(2πt)')

# # Сохраняем график в разных форматах
# plt.savefig('cos_graph.png', dpi=300)  # Сохраняем в PNG с разрешением 300 dpi
# plt.savefig('cos_graph.jpg', dpi=300)  # Сохраняем в JPG с разрешением 300 dpi
# plt.savefig('cos_graph.pdf')  # Сохраняем в PDF
# plt.savefig('cos_graph.eps')  # Сохраняем в EPS
# plt.savefig('cos_graph.svg')  # Сохраняем в SVG
# plt.savefig('cos_graph.svgz')  # Сохраняем в SVGZ

# # Отображаем график (необязательно)
# plt.show()

"""Задание 16 Выполнять одно задание с номером (𝑛 − 1)%𝑚 + 1, где 𝑛 —
номер в списке группы, а 𝑚 — число задач в задании."""

# n = 19 # по прежнему Михайлов
# m = 5 # кол-во. заданий
# print((n - 1) % m + 1) # =4

"""Постройте семейство функций на одном графике различными цветами:
4. логарифмические функции log2(𝑥), ln(𝑥) и log10(𝑥) на отрезке 𝑥 ∈ [1; 10];"""

# import matplotlib.pyplot as plt
# import numpy as np

# # Создаем массив значений x
# x = np.arange(1, 10, 0.01)

# # Вычисляем значения функций
# y1 = np.log2(x)  # log2(x)
# y2 = np.log(x)   # ln(x)
# y3 = np.log10(x) # log10(x)

# # Строим графики
# plt.plot(x, y1, color='blue', label='log2(x)')
# plt.plot(x, y2, color='green', label='ln(x)')
# plt.plot(x, y3, color='red', label='log10(x)')

# # Добавляем легенду
# plt.legend()

# # Добавляем название графика и подписи осей
# plt.title('Семейство логарифмических функций')
# plt.xlabel('x')
# plt.ylabel('y')

# # Отображаем график
# plt.show()

"""Задание 17 Выполнять одно задание с номером (𝑛 − 1)%𝑚 + 1, где 𝑛 —
номер в списке группы, а 𝑚 — число задач в задании."""

# n = 19 # по прежнему Михайлов
# m = 4 # кол-во. заданий
# print((n - 1) % m + 1) # =3

"""Для построенного в задании 16 графика сделайте сетку и легенду. Перестройте графики так, чтобы каждая кривая располагалась на одном графике с помощью команды subplot, легенду уберите, а её текст переместите в название
соответствующего графика. Графики расположите на полотне:
3. в 3 столбца;"""

# import matplotlib.pyplot as plt
# import numpy as np

# # Создаем массив значений x
# x = np.arange(1, 10, 0.01)

# # Вычисляем значения функций
# y1 = np.log2(x)  # log2(x)
# y2 = np.log(x)   # ln(x)
# y3 = np.log10(x) # log10(x)

# # Создаем полотно с 3 столбцами
# fig, axes = plt.subplots(1, 3, figsize=(12, 4))  # 1 строка, 3 столбца

# # Строим графики
# axes[0].plot(x, y1, color='blue')
# axes[0].set_title('График функции log2(x)')
# axes[0].grid(True)

# axes[1].plot(x, y2, color='green')
# axes[1].set_title('График функции ln(x)')
# axes[1].grid(True)

# axes[2].plot(x, y3, color='red')
# axes[2].set_title('График функции log10(x)')
# axes[2].grid(True)

# # Добавляем общие настройки для осей
# for ax in axes:
#     ax.set_xlabel('x')
#     ax.set_ylabel('y')

# # Отображаем график
# plt.tight_layout()  # Устраняем перекрытия элементов графика
# plt.show()

"""Задание 18 Выполнять одно задание с номером (𝑛 − 1)%𝑚 + 1, где 𝑛 —
номер в списке группы, а 𝑚 — число задач в задании"""

# n = 19 # по прежнему Михайлов
# m = 5 # кол-во. заданий
# print((n - 1) % m + 1) # =4

"""Постройте круговую диаграмму, которая показывала бы доли от общего числа студентов вашей группы, сдавших сессию на:
4. с задолжностями, сумевших в итоге пересдать"""

# import matplotlib.pyplot as plt

# # Предположим, что у меня:
# # 10  с задолженностями
# # 8 пересдавших задолженности
# # 12 сдавших сессию без задолженностей

# sizes = [10, 8, 12]
# labels = ['Задолженности', 'Пересдали', 'Сдали без задолженностей']

# # Создаем круговую диаграмму
# plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)

# # Устанавливаем название графика
# plt.title('Успеваемость студентов на сессии')

# # Отображаем график
# plt.show()

"""Задание 19 Выполнять одно задание с номером (𝑛 − 1)%𝑚 + 1, где 𝑛 —
номер в списке группы, а 𝑚 — число задач в задании."""

# n = 19 # по прежнему Михайлов
# m = 15 # кол-во. заданий
# print((n - 1) % m + 1) # =4

"""Постройте закрашенную контурную диаграмму и трёхмерный график для
следующих функций двух переменных, определённых в прямоугольной области
𝑥 ∈ [−3; 3], 𝑦 ∈ [−3; 3]:
4. z = x^3 - y^3"""

# import matplotlib.pyplot as plt
# import numpy as np
# from mpl_toolkits.mplot3d import Axes3D

# # Определяем функцию
# def func(x, y):
#   return x**3 - y**3

# # Создаем сетку координат
# x = np.linspace(-3, 3, 100)
# y = np.linspace(-3, 3, 100)
# X, Y = np.meshgrid(x, y)

# # Вычисляем значения функции
# Z = func(X, Y)

# # Строим контурную диаграмму
# fig, ax = plt.subplots()
# contour = ax.contourf(X, Y, Z, 20, cmap='viridis')  # 20 уровней контура, цветовая схема 'viridis'
# ax.clabel(contour, inline=True, fontsize=8)  # Подписи уровней контура
# ax.set_xlabel('x')
# ax.set_ylabel('y')
# ax.set_title('Контурная диаграмма функции z = x^3 - y^3')
# plt.show()

# # Строим 3D-график
# fig = plt.figure()
# ax = fig.add_subplot(projection='3d')
# ax.plot_surface(X, Y, Z, cmap='viridis')  # Цветовая схема 'viridis'
# ax.set_xlabel('x')
# ax.set_ylabel('y')
# ax.set_zlabel('z')
# ax.set_title('3D-график функции z = x^3 - y^3')
# plt.show()

"""6.8 Задания на работу с файлами и с операционной системой
Задание 20 Работа с текстовыми файлами. Задания выполняйте все по порядку.
1. Запишите в файл с помощью функции write() три столбца: в первый —
целые числа от 1 до 100, во второй — их квадраты, в третий — их кубы.
Столбцы можно разделить табуляциями ’\t’ или пробелами ’␣’."""

# with open("numbers.txt", "w") as file:
#     for i in range(1, 101):
#         file.write(f"{i}\t{i**2}\t{i**3}\n")

"""2. Запишите в файл с помощью функции write() три столбца: в первый числа
𝑥 от 0 до 2𝜋 с маленьким шагом (например, 𝜋/24), во второй — значения
sin(𝑥), в третий — значения cos(𝑥). Столбцы можно разделить табуляциями
’\t’ или пробелами ’␣’."""

# import math
# with open("trig_values.txt", "w") as file:
#     step = math.pi / 24
#     for x in range(0, int(2 * math.pi * 24 / math.pi) + 1):
#         x_rad = x * step
#         file.write(f"{x_rad:.4f}\t{math.sin(x_rad):.4f}\t{math.cos(x_rad):.4f}\n")

"""3. Создайте (откройте на запись) текстовый файл «Зачёт.txt». Запишите
в него информацию о своей группе в следующем формате: «Фамилия Имя
Отчество Оценка». Данные вводите с клавиатуры. Вначале введите количество учеников в вашей группе. Далее запрашивайте у пользователя необходимую информацию, пока не введёте всех учеников. При записи в файл в
качестве разделителя между столбцами используйте табуляцию (’\t’) или пробел (’ ’)."""

# with open("Зачёт.txt", "w") as file:
#     num_students = int(input("Введите количество учеников в вашей группе: "))
#     for i in range(num_students):
#         surname = input("Введите фамилию: ")
#         name = input("Введите имя: ")
#         patronymic = input("Введите отчество: ")
#         grade = input("Введите оценку: ")
#         file.write(f"{surname}\t{name}\t{patronymic}\t{grade}\n")

"""4. Считайте текстовый файл «Зачёт.txt». Найдите в нём оценку любого учащегося (фамилия вводится с клавиатуры) и выведите её на экран."""

# surname = input("Введите фамилию студента: ")
# with open("Зачёт.txt", "r") as file:
#     for line in file:
#         parts = line.strip().split("\t")
#         if parts[0] == surname:
#             print(f"Оценка студента {surname}: {parts[3]}")
#             break  # Выходим из цикла, как только нашли студента
#     else:
#         print(f"Студент с фамилией {surname} не найден в файле.")

"""5. Файл EEG.txt (возьмите у преподавателя) содержит запись ЭЭГ (электроэнцефалограммы) человека, включающую сигналы с 16 электродов (отведений). Каждому отведению соответствует столбец чисел. Столбцы разделены символом табуляции. Создайте программу, выделяющую в отдельный
текстовый файл отведение с заданным номером. Название текстового файла составьте из названия исходного файла без расширения, номера отведения и расширения ’.txt’."""

"""Работает при условии выбора 1 ответвления
Результат: копирование в новый файл содерфимое старого"""

# import os

# def extract_channel(input_file, channel_number):
#   """Выделяет заданное отведение из файла ЭЭГ в отдельный файл.

#   Args:
#     input_file: Путь к файлу с записью ЭЭГ.
#     channel_number: Номер отведения, которое нужно выделить (от 1 до 16).
#   """

#   # Проверяем, существует ли файл
#   if not os.path.exists(input_file):
#     print(f"Файл '{input_file}' не найден.")
#     return

#   # Создаем имя для выходного файла
#   output_filename = os.path.splitext(input_file)[0] + f"_{channel_number}.txt"

#   # Проверяем, валиден ли номер канала
#   if not 1 <= channel_number <= 16:
#     print(f"Номер канала должен быть от 1 до 16.")
#     return

#   # Открываем файл для чтения
#   with open(input_file, "r") as infile:
#     # Считываем все строки в список
#     lines = infile.readlines()
#     # Проверяем, достаточно ли строк в файле
#     if len(lines) >= channel_number:
#       # Открываем выходной файл для записи
#       with open(output_filename, "w") as outfile:
#         # Проходим по каждой строке
#         for line in lines:
#           # Разделяем строку по табуляциям
#           values = line.strip().split("\t")
#           # Проверяем, достаточно ли значений в строке
#           if len(values) >= channel_number:
#             # Выбираем значение из нужного столбца (канале)
#             channel_value = values[channel_number - 1]
#             # Записываем значение в выходной файл
#             outfile.write(channel_value + "\n")
#           else:
#             # Пропускаем строку, если в ней недостаточно элементов
#             print(f"В строке недостаточно элементов для канала {channel_number}.")
#     else:
#       print(f"В файле недостаточно строк для канала {channel_number}.")

#   print(f"Отведение {channel_number} успешно выделено в файл '{output_filename}'.")

# # Получаем имя файла от пользователя
# input_file = input("Введите имя файла с записью ЭЭГ: ")

# # Получаем номер отведения от пользователя
# channel_number = int(input("Введите номер отведения (от 1 до 16): "))

# # Вызываем функцию для выделения канала
# extract_channel(input_file, channel_number)

"""Задание 21 Работа с бинарными файлами. Задания выполняйте все по
порядку.
1. Файл Rat.wdq содержит бинарное представление записи с 4 отведений внутричерепной ЭЭГ крыс. Отведения записаны последовательно. Числа знаковые двухбайтные. Создайте программу, выводящую информацию из одного
из отведений с заданным номером в отдельный текстовый (.txt) файл. Запишите первые 100 измерений. Название текстового файла составьте из
названия исходного файла без расширения ’.wdq’, номера отведения и расширения ’.txt’."""

#

"""2. Файл rat_01_02ml.wdq содержит реальные данные от крысы генетической
линии WAG/Rij, страдающей эпилепсией. Файл организован следующим
образом: первые 5296 байт — служебная информация, которую при считывании можно пропустить методом seek, затем записаны целые двухбайтные
знаковые числа, каждые 4 последовательных числа (8 байт) представляют
собою записи 4 каналов за один и тот же момент времени. Считайте файл до
конца, пропустив служебную информацию. Раскодируйте данные, используя модуль struct, функцию unpack. Чтобы декодировать большие объёмы
данных полезно использовать умножение числа на символ. Постройте графики для всех четырёх каналов один под другим. Чтобы выбрать один канал полезно использовать срезы списков с шагом. По оси абсцисс отложите
время: интервал между последовательными значениями времени составляет для данного файла 0.00195 с, время можно сгенерировать с помощью
функций arange или linspace из модуля numpy."""

#

"""Задание 22 Работа с операционной системой. Задания выполняйте все по порядку.
Напишите две независимые программы. Первую программу, которая создаёт папку Распределения, если она ещё не создана. Далее записывает в неё три
текстовых файла .txt, содержащих последовательность величин, распределённых по равномерному закону, нормальному закону и закону 𝜒^2 с 5 степенями свободы. Необходимые функции ищите в Главе 7, пункт 7.3.
Затем напишите вторую программу, которая переходит в папку Распределения,
находит в ней все текстовые файлы, строит для них гистограммы распределений, сохраняет графики в файлы с таким же названием, как исходный текстовый файл, но другим расширением (.png, .jpg или .pdf)."""

"""Программа 1: Создание файлов с распределениями"""

# import os
# import random
# import numpy as np
# import matplotlib.pyplot as plt

# def generate_uniform(n):
#     """Генерирует n случайных чисел с равномерным распределением"""
#     return [random.uniform(0, 1) for _ in range(n)]

# def generate_normal(n):
#     """Генерирует n случайных чисел с нормальным распределением"""
#     return np.random.normal(loc=0, scale=1, size=n)

# def generate_chi_squared(n, df=5):
#     """Генерирует n случайных чисел с распределением 𝜒^2 с df степенями свободы"""
#     return np.random.chisquare(df=df, size=n)

# def create_distribution_files(directory='Распределения'):
#     """Создаёт папку 'Распределения', если она ещё не создана,
#     затем записывает в неё файлы с распределениями"""
    
#     # Создаём папку, если её нет
#     if not os.path.exists(directory):
#         os.makedirs(directory)

#     # Количество значений в каждом файле
#     n = 1000

#     # Генерируем и сохраняем файлы
#     with open(os.path.join(directory, 'uniform.txt'), 'w') as f:
#         for value in generate_uniform(n):
#             f.write(str(value) + '\n')
    
#     with open(os.path.join(directory, 'normal.txt'), 'w') as f:
#         for value in generate_normal(n):
#             f.write(str(value) + '\n')

#     with open(os.path.join(directory, 'chi_squared.txt'), 'w') as f:
#         for value in generate_chi_squared(n):
#             f.write(str(value) + '\n')

# if __name__ == '__main__':
#     create_distribution_files()

"""Программа 2: Построение гистограмм и сохранение графиков"""

# import os
# import matplotlib.pyplot as plt

# def plot_histograms(directory='Распределения'):
#     """Переходит в папку 'Распределения', находит файлы .txt,
#     строит для них гистограммы и сохраняет графики"""

#     # Переходим в папку
#     os.chdir(directory)

#     # Получаем список файлов .txt
#     txt_files = [f for f in os.listdir() if f.endswith('.txt')]

#     # Строим гистограммы для каждого файла
#     for file in txt_files:
#         # Загружаем данные из файла
#         data = []
#         with open(file, 'r') as f:
#             for line in f:
#                 data.append(float(line.strip()))

#         # Строим гистограмму
#         plt.hist(data, bins=20)

#         # Настраиваем график
#         plt.title(f'Гистограмма распределения {file[:-4]}')
#         plt.xlabel('Значение')
#         plt.ylabel('Частота')

#         # Сохраняем график
#         plt.savefig(file[:-4] + '.png')

#         # Очищаем график
#         plt.clf()

# if __name__ == '__main__':
#     plot_histograms()

"""7.5 Задания на использование встроенных библиотек numpy
Задание 23 Найдите определитель матрицы. Матрицу возьмите из
текстового файла, созданного ранее, либо у преподавателя."""

# import numpy as np

# def calculate_determinant(filename):

#     # Загружаем матрицу из файла
#     with open(filename, 'r') as f:
#         matrix = []
#         for line in f:
#             row = [float(x) for x in line.strip().split()]
#             matrix.append(row)

#     # Преобразуем список списков в матрицу NumPy
#     matrix = np.array(matrix)

#     # Вычисляем определитель
#     determinant = np.linalg.det(matrix)

#     return determinant

# if __name__ == '__main__':
#     filename = input('Введите имя файла с матрицей: ')
#     determinant = calculate_determinant(filename)
#     print(f'Определитель матрицы: {determinant}')

"""Задание 24 Решите систему линейных уравнений. Матрицу коэффициентов и столбец свободных членов прочитайте из текстовых файлов,
созданных ранее. Запишите в новый текстовый файл полученные корни."""

# import numpy as np

# def solve_linear_system(coefficient_file, constant_file):

#     # Загружаем матрицу коэффициентов из файла
#     with open(coefficient_file, 'r') as f:
#         coefficients = []
#         for line in f:
#             row = [float(x) for x in line.strip().split()]
#             coefficients.append(row)

#     # Загружаем столбец свободных членов из файла
#     with open(constant_file, 'r') as f:
#         constants = [float(line.strip()) for line in f]

#     # Преобразуем списки в матрицы NumPy
#     coefficients = np.array(coefficients)
#     constants = np.array(constants)

#     # Решаем систему уравнений
#     solution = np.linalg.solve(coefficients, constants)

#     return solution

# if __name__ == '__main__':
#     coefficient_file = input('Введите имя файла с матрицей коэффициентов: ')
#     constant_file = input('Введите имя файла со столбцом свободных членов: ')
#     solution = solve_linear_system(coefficient_file, constant_file)

#     # Сохраняем корни в файл
#     with open('solution.txt', 'w') as f:
#         for root in solution:
#             f.write(str(root) + '\n')

#     print('Корни системы сохранены в файл solution.txt')

"""Задание 25 Выполнять одно задание с номером (𝑛 − 1)%𝑚 + 1, где 𝑛 —
номер в списке группы, а 𝑚 — число задач в задании."""

# n = 19 # по прежнему Михайлов
# m = 8 # кол-во. заданий
# print((n - 1) % m + 1) # =3

"""Сгенерируйте набор значений заданной функции с шумом. Аппроксимируйте его полиномом второй степени. Оцените ошибку аппроксимации. Постройте
график. Функции:
3. парабола 𝑦 = 𝑥^2 − 𝑥 − 6 на отрезке [−4; 4] с белым шумом, распределённым по закону 𝜒^2 (random.chisquare) с параметрами (6; 𝑛), где 6 — количество
степеней свободы шума, а 𝑛 — длина ряда 𝑦;"""

# import numpy as np
# import matplotlib.pyplot as plt
# from numpy.polynomial import Polynomial

# def generate_data(func, interval, noise_func, noise_params):
#   """
#   Генерирует набор значений функции с шумом.

#   Args:
#     func: Функция, которую нужно сгенерировать.
#     interval: Интервал, на котором нужно сгенерировать данные.
#     noise_func: Функция, генерирующая шум.
#     noise_params: Параметры для функции шума.

#   Returns:
#     numpy.ndarray: Массив значений функции с шумом.
#   """

#   x = np.linspace(interval[0], interval[1], 100)
#   y = func(x)
#   noise = noise_func(*noise_params)
#   y_noisy = y + noise
#   return x, y_noisy

# def polynomial_approximation(x, y, degree):
#   """
#   Аппроксимирует данные полиномом заданной степени.

#   Args:
#     x: Массив значений x.
#     y: Массив значений y.
#     degree: Степень полинома.

#   Returns:
#     numpy.polynomial.Polynomial: Полином, аппроксимирующий данные.
#   """

#   poly = Polynomial.fit(x, y, degree)
#   return poly

# def calculate_error(y_true, y_pred):
#   """
#   Вычисляет среднеквадратическую ошибку.

#   Args:
#     y_true: Истинные значения.
#     y_pred: Предсказанные значения.

#   Returns:
#     float: Среднеквадратичная ошибка.
#   """

#   error = np.sqrt(np.mean((y_true - y_pred) ** 2))
#   return error

# def plot_results(x, y_true, y_pred, poly):
#   """
#   Строит график с истинными данными, аппроксимированными данными и полиномом.

#   Args:
#     x: Массив значений x.
#     y_true: Истинные значения.
#     y_pred: Предсказанные значения.
#     poly: Полином, аппроксимирующий данные.
#   """

#   plt.plot(x, y_true, label='Истинные данные')
#   plt.plot(x, y_pred, label='Аппроксимированные данные')
#   plt.plot(x, poly(x), label='Полином 2-й степени')
#   plt.legend()
#   plt.title('Аппроксимация параболы полиномом 2-й степени')
#   plt.xlabel('x')
#   plt.ylabel('y')
#   plt.show()

# if __name__ == '__main__':
#   # Задаем функцию, интервал и параметры шума
#   func = lambda x: x ** 2 - x - 6
#   interval = [-4, 4]
#   noise_func = np.random.chisquare
#   noise_params = (6, 100)  # 6 степеней свободы, 100 значений

#   # Генерируем данные с шумом
#   x, y_noisy = generate_data(func, interval, noise_func, noise_params)

#   # Аппроксимируем данные полиномом 2-й степени
#   poly = polynomial_approximation(x, y_noisy, 2)

#   # Вычисляем предсказанные значения
#   y_pred = poly(x)

#   # Оцениваем ошибку
#   error = calculate_error(func(x), y_pred)

#   # Строим график
#   plot_results(x, func(x), y_pred, poly)

#   print(f'Среднеквадратичная ошибка: {error}')

"""Задание 26 Сгенерируйте 5 рядов y, как это описано в предыдущем задании, пусть ряды отличаются реализациями шума. Для каждого x таким
образом будет доступно по 5 значений y. По этим значениям рассчитайте для каждого x соответствующее ему среднее значение 𝑦¯ и среднеквадратичное отклонение от среднего y. С использованием полученных рядов 𝑦¯(x) и y(x) постройте график средних с планками погрешностей (errorbar)."""

# import numpy as np
# import matplotlib.pyplot as plt
# from numpy.polynomial import Polynomial

# def generate_data(func, interval, noise_func, noise_params, n_series=5):
#   """
#   Генерирует набор значений функции с шумом для нескольких рядов.

#   Args:
#     func: Функция, которую нужно сгенерировать.
#     interval: Интервал, на котором нужно сгенерировать данные.
#     noise_func: Функция, генерирующая шум.
#     noise_params: Параметры для функции шума.
#     n_series: Количество рядов.

#   Returns:
#     tuple: Массивы значений x, y_series (массив из n_series массивов y).
#   """

#   x = np.linspace(interval[0], interval[1], 100)
#   y_series = []
#   for _ in range(n_series):
#     y = func(x)
#     noise = noise_func(*noise_params)
#     y_noisy = y + noise
#     y_series.append(y_noisy)
#   return x, np.array(y_series)

# def calculate_mean_and_std(y_series):
#   """
#   Вычисляет среднее значение и среднеквадратичное отклонение для каждого x.

#   Args:
#     y_series: Массив из n_series массивов y.

#   Returns:
#     tuple: Массивы средних значений y_mean, среднеквадратичных отклонений y_std.
#   """

#   y_mean = np.mean(y_series, axis=0)
#   y_std = np.std(y_series, axis=0)
#   return y_mean, y_std

# def plot_errorbar(x, y_mean, y_std):
#   """
#   Строит график средних значений с планками погрешностей.

#   Args:
#     x: Массив значений x.
#     y_mean: Массив средних значений y.
#     y_std: Массив среднеквадратичных отклонений.
#   """

#   plt.errorbar(x, y_mean, yerr=y_std, fmt='o-', label='Средние значения')
#   plt.xlabel('x')
#   plt.ylabel('y')
#   plt.title('Средние значения с планками погрешностей')
#   plt.legend()
#   plt.show()

# if __name__ == '__main__':
#   # Задаем функцию, интервал и параметры шума
#   func = lambda x: x ** 2 - x - 6
#   interval = [-4, 4]
#   noise_func = np.random.chisquare
#   noise_params = (6, 100)  # 6 степеней свободы, 100 значений

#   # Генерируем 5 рядов данных
#   x, y_series = generate_data(func, interval, noise_func, noise_params, n_series=5)

#   # Вычисляем средние значения и среднеквадратичные отклонения
#   y_mean, y_std = calculate_mean_and_std(y_series)

#   # Строим график средних значений с планками погрешностей
#   plot_errorbar(x, y_mean, y_std)

"""Задание 27 Выполнять одно задание с номером (𝑛 − 1)%𝑚 + 1, где 𝑛 —
номер в списке группы, а 𝑚 — число задач в задании."""

# n = 19 # по прежнему Михайлов
# m = 3 # кол-во. заданий
# print((n - 1) % m + 1) # =1

"""Сгенерируйте случайные векторы из 10, 30 и 200 значений:
3. из целых чисел в диапазоне [0; 10]."""

# import numpy as np

# # Вектор из 10 значений
# vector_10 = np.random.randint(0, 11, size=10)

# # Вектор из 30 значений
# vector_30 = np.random.randint(0, 11, size=30)

# # Вектор из 200 значений
# vector_200 = np.random.randint(0, 11, size=200)

# # Вывод векторов
# print("Вектор из 10 значений:", vector_10)
# print("Вектор из 30 значений:", vector_30)
# print("Вектор из 200 значений:", vector_200)

"""Задание 28 Выполнять одно задание с номером (𝑛 − 1)%𝑚 + 1, где 𝑛 —
номер в списке группы, а 𝑚 — число задач в задании"""

# n = 19 # по прежнему Михайлов
# m = 8 # кол-во. заданий
# print((n - 1) % m + 1) # =3

"""Сгенерируйте и случайно перемешайте:
3. массив из 10 чисел, первые 5 из которых нули, вторые 5 — единицы;"""

# import numpy as np
# # Создаем массив из 10 элементов
# array = np.array([0] * 5 + [1] * 5)

# # Перемешиваем элементы массива случайным образом
# np.random.shuffle(array)
# print("Неизмененный массив: [0 0 0 0 0 1 1 1 1 1]")
# print("Перемешанный массив:", array)

"""Задание 29 Выполнять одно задание с номером (𝑛 − 1)%𝑚 + 1, где 𝑛 —
номер в списке группы, а 𝑚 — число задач в задании."""

# n = 19 # по прежнему Михайлов
# m = 4 # кол-во. заданий
# print((n - 1) % m + 1) # =3

"""Рассчитайте и постройте периодограмму — оценку спектра мощности:
3. нормального шума, параметры выберите сами;"""

# import numpy as np
# import matplotlib.pyplot as plt

# def calculate_periodogram(signal, fs):
#   """
#   Вычисляет периодограмму сигнала.

#   Args:
#     signal: Массив значений сигнала.
#     fs: Частота дискретизации сигнала.

#   Returns:
#     tuple: Массивы частот f, значений спектральной мощности Pxx.
#   """

#   f, Pxx = plt.psd(signal, Fs=fs)
#   return f, Pxx

# if __name__ == '__main__':
#   # Параметры нормального шума
#   mean = 0
#   std = 1
#   n = 1000  # Количество точек в сигнале
#   fs = 1000  # Частота дискретизации

#   # Генерируем нормальный шум
#   noise = np.random.normal(loc=mean, scale=std, size=n)

#   # Вычисляем периодограмму
#   f, Pxx = calculate_periodogram(noise, fs)

#   # Строим график периодограммы
#   plt.figure(figsize=(8, 6))
#   plt.plot(f, Pxx)
#   plt.title('Периодограмма нормального шума')
#   plt.xlabel('Частота (Гц)')
#   plt.ylabel('Спектральная мощность')
#   plt.grid(True)
#   plt.show()

"""Задание 30 Выполнять одно задание с номером (𝑛 − 1)%𝑚 + 1, где 𝑛 —
номер в списке группы, а 𝑚 — число задач в задании."""

# n = 19 # по прежнему Михайлов
# m = 15 # кол-во. заданий
# print((n - 1) % m + 1) # =4

"""Сгенерируйте случайный процесс длиною в 10000 значений и постройте гистограмму его распределения для следующих рядов:
4. равномерный шум с параметрами (−𝑎, 𝑎), где 𝑎 — случайное равномерно распределённое число из диапазона [0; 1];"""

# import numpy as np
# import matplotlib.pyplot as plt

# def generate_uniform_noise(n, a):
#   """
#   Генерирует равномерный шум с параметрами (-a, a).

#   Args:
#     n: Количество значений в ряду.
#     a: Верхняя граница для равномерного распределения.

#   Returns:
#     numpy.ndarray: Массив значений равномерного шума.
#   """

#   return np.random.uniform(low=-a, high=a, size=n)

# if __name__ == '__main__':
#   n = 10000  # Длина ряда
#   a = np.random.uniform(low=0, high=1)  # Случайная верхняя граница

#   # Генерируем равномерный шум
#   uniform_noise = generate_uniform_noise(n, a)

#   # Строим гистограмму
#   plt.hist(uniform_noise, bins=50)
#   plt.title('Гистограмма равномерного шума')
#   plt.xlabel('Значение')
#   plt.ylabel('Частота')
#   plt.show()
