"""–ó–∞–¥–∞–Ω–∏–µ 26 –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ 5 —Ä—è–¥–æ–≤ y, –∫–∞–∫ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∑–∞–¥–∞–Ω–∏–∏, –ø—É—Å—Ç—å —Ä—è–¥—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏ —à—É–º–∞. –î–ª—è –∫–∞–∂–¥–æ–≥–æ x —Ç–∞–∫–∏–º
–æ–±—Ä–∞–∑–æ–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ 5 –∑–Ω–∞—á–µ–Ω–∏–π y. –ü–æ —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ x —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –µ–º—É —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ùë¶¬Ø –∏ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ y. –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ ùë¶¬Ø(x) –∏ y(x) –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–∏—Ö —Å –ø–ª–∞–Ω–∫–∞–º–∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π (errorbar)."""

# import numpy as np
# import matplotlib.pyplot as plt
# from numpy.polynomial import Polynomial

# def generate_data(func, interval, noise_func, noise_params, n_series=5):
#   """
#   –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å —à—É–º–æ–º –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä—è–¥–æ–≤.

#   Args:
#     func: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.
#     interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.
#     noise_func: –§—É–Ω–∫—Ü–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∞—è —à—É–º.
#     noise_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —à—É–º–∞.
#     n_series: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤.

#   Returns:
#     tuple: –ú–∞—Å—Å–∏–≤—ã –∑–Ω–∞—á–µ–Ω–∏–π x, y_series (–º–∞—Å—Å–∏–≤ –∏–∑ n_series –º–∞—Å—Å–∏–≤–æ–≤ y).
#   """

#   x = np.linspace(interval[0], interval[1], 100)
#   y_series = []
#   for _ in range(n_series):
#     y = func(x)
#     noise = noise_func(*noise_params)
#     y_noisy = y + noise
#     y_series.append(y_noisy)
#   return x, np.array(y_series)

# def calculate_mean_and_std(y_series):
#   """
#   –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ x.

#   Args:
#     y_series: –ú–∞—Å—Å–∏–≤ –∏–∑ n_series –º–∞—Å—Å–∏–≤–æ–≤ y.

#   Returns:
#     tuple: –ú–∞—Å—Å–∏–≤—ã —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π y_mean, —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π y_std.
#   """

#   y_mean = np.mean(y_series, axis=0)
#   y_std = np.std(y_series, axis=0)
#   return y_mean, y_std

# def plot_errorbar(x, y_mean, y_std):
#   """
#   –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∫–∞–º–∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π.

#   Args:
#     x: –ú–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π x.
#     y_mean: –ú–∞—Å—Å–∏–≤ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π y.
#     y_std: –ú–∞—Å—Å–∏–≤ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π.
#   """

#   plt.errorbar(x, y_mean, yerr=y_std, fmt='o-', label='–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è')
#   plt.xlabel('x')
#   plt.ylabel('y')
#   plt.title('–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–ª–∞–Ω–∫–∞–º–∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π')
#   plt.legend()
#   plt.show()

# if __name__ == '__main__':
#   # –ó–∞–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à—É–º–∞
#   func = lambda x: x ** 2 - x - 6
#   interval = [-4, 4]
#   noise_func = np.random.chisquare
#   noise_params = (6, 100)  # 6 —Å—Ç–µ–ø–µ–Ω–µ–π —Å–≤–æ–±–æ–¥—ã, 100 –∑–Ω–∞—á–µ–Ω–∏–π

#   # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 —Ä—è–¥–æ–≤ –¥–∞–Ω–Ω—ã—Ö
#   x, y_series = generate_data(func, interval, noise_func, noise_params, n_series=5)

#   # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
#   y_mean, y_std = calculate_mean_and_std(y_series)

#   # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∫–∞–º–∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π
#   plot_errorbar(x, y_mean, y_std)